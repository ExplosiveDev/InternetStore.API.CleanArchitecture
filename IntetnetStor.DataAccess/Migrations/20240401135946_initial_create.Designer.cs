// <auto-generated />
using System;
using InternetStore.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntetnetStore.DataAccess.Migrations
{
    [DbContext(typeof(ProductStoreDBcontext))]
    [Migration("20240401135946_initial_create")]
    partial class initial_create
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InternetStore.DataAccess.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(252)
                        .HasColumnType("nvarchar(252)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0038adef-9755-46ff-ba3b-40732a608afd"),
                            BrandId = new Guid("48be627a-fea0-477f-8682-f9b9725c387b"),
                            CategoryId = new Guid("b61decb4-84d9-4057-b1e4-d7fb612d1d8f"),
                            Count = 1,
                            Description = "A715-42G-R3EZ (NH.QBFEU.00C) Charcoal Black / AMD Ryzen 5 5500U / RAM 16 ГБ / SSD 512 ГБ / nVidia GeForce GTX 1650",
                            ImagePath = "https://content2.rozetka.com.ua/goods/images/big/343096346.jpg",
                            Name = "Ноутбук Acer Aspire 7",
                            Price = 28999m
                        },
                        new
                        {
                            Id = new Guid("8a8e2b32-39eb-479e-8f20-72a8871251a5"),
                            BrandId = new Guid("0bc0af50-0c40-4912-a453-fae84802afe6"),
                            CategoryId = new Guid("b61decb4-84d9-4057-b1e4-d7fb612d1d8f"),
                            Count = 1,
                            Description = "X515EA-BQ2066 (90NB0TY1-M00VF0) Slate Grey / 15.6\" IPS Full HD / Intel Core i3-1115G4 / RAM 12 ГБ / SSD 512 ГБ",
                            ImagePath = "https://content2.rozetka.com.ua/goods/images/big/347802389.jpg",
                            Name = "Ноутбук ASUS Laptop",
                            Price = 16588m
                        },
                        new
                        {
                            Id = new Guid("502dae02-90e5-4b90-85c4-5de4be52a54d"),
                            BrandId = new Guid("46a417c5-5e5f-448c-9811-dd96cfeddf2c"),
                            CategoryId = new Guid("b61decb4-84d9-4057-b1e4-d7fb612d1d8f"),
                            Count = 1,
                            Description = "Екран 15.6\" IPS (1920x1080) Full HD, матовий / AMD Ryzen 3 7320U (2.4 - 4.1 ГГц) / RAM 16 ГБ / SSD 512 ГБ / AMD Radeon 610M Graphics / без ОД / Wi-Fi / Bluetooth / веб-камера / без ОС / 1.58 кг / сірий",
                            ImagePath = "https://content1.rozetka.com.ua/goods/images/big/334484472.jpg",
                            Name = "Ноутбук Lenovo IdeaPad 1",
                            Price = 19999m
                        },
                        new
                        {
                            Id = new Guid("c48af434-f4cd-4905-95e2-129159664aff"),
                            BrandId = new Guid("bf383338-5fab-4845-a5bb-79c7288b4739"),
                            CategoryId = new Guid("7d7dde3b-1176-47fa-86d4-be71afd4ffce"),
                            Count = 1,
                            Description = "Екран (6.7, OLED (Super Retina XDR), 2796x1290) / Apple A17 Pro / основна потрійна камера: 48 Мп + 12 Мп + 12 Мп, фронтальна камера: 12 Мп / 256 ГБ вбудованої пам'яті / 3G / LTE / 5G / GPS / Nano-SIM / iOS 17",
                            ImagePath = "https://content.rozetka.com.ua/goods/images/big/364834229.jpg",
                            Name = "Iphone 15 Pro Max",
                            Price = 52299m
                        });
                });

            modelBuilder.Entity("IntetnetStore.DataAccess.Entities.BrandEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(252)
                        .HasColumnType("nvarchar(252)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0bc0af50-0c40-4912-a453-fae84802afe6"),
                            Name = "Asus"
                        },
                        new
                        {
                            Id = new Guid("48be627a-fea0-477f-8682-f9b9725c387b"),
                            Name = "Acer"
                        },
                        new
                        {
                            Id = new Guid("46a417c5-5e5f-448c-9811-dd96cfeddf2c"),
                            Name = "Lenovo"
                        },
                        new
                        {
                            Id = new Guid("bf383338-5fab-4845-a5bb-79c7288b4739"),
                            Name = "Apple"
                        });
                });

            modelBuilder.Entity("IntetnetStore.DataAccess.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(252)
                        .HasColumnType("nvarchar(252)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b61decb4-84d9-4057-b1e4-d7fb612d1d8f"),
                            Name = "Laptop"
                        },
                        new
                        {
                            Id = new Guid("7d7dde3b-1176-47fa-86d4-be71afd4ffce"),
                            Name = "Smartphone"
                        },
                        new
                        {
                            Id = new Guid("549343a6-85ce-448d-bd68-dd5c0c5ade0b"),
                            Name = "Electronice"
                        });
                });

            modelBuilder.Entity("IntetnetStore.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("IntetnetStore.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IntetnetStore.DataAccess.Entities.UserRoleEntity", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleEntity");
                });

            modelBuilder.Entity("InternetStore.DataAccess.Entities.ProductEntity", b =>
                {
                    b.HasOne("IntetnetStore.DataAccess.Entities.BrandEntity", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntetnetStore.DataAccess.Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IntetnetStore.DataAccess.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("IntetnetStore.DataAccess.Entities.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntetnetStore.DataAccess.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntetnetStore.DataAccess.Entities.BrandEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("IntetnetStore.DataAccess.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
